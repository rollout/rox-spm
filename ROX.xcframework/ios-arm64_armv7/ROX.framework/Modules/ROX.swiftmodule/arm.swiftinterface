// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.1 (swiftlang-1300.0.31.4 clang-1300.0.29.6)
// swift-module-flags: -target armv7-apple-ios8.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ROX
import Foundation
import ROXCore
import Swift
import _Concurrency
public protocol RoxContainer : AnyObject {
  var namespace: Swift.String? { get }
}
extension RoxContainer {
  public var namespace: Swift.String? {
    get
  }
}
public class RoxEnumString<T> where T : Swift.RawRepresentable, T.RawValue == Swift.Int {
  public init(_ defaultValue: T)
  public init(_ defaultValue: T, freeze: ROXFreeze)
  public var value: T {
    get
  }
  public var name: Swift.String {
    get
  }
  public var objcBridge: ROXString {
    get
  }
  public func unfreeze()
  @objc deinit
}
public typealias RoxNetworkConfigurationsOptions = ROXNetworkConfigurationsOptions
public typealias RoxOptions = ROXOptions
public typealias RoxOptionsVerboseLevel = ROXOptionsVerboseLevel
public typealias RoxReportingValue = ROXReportingValue
public typealias RoxFetcherResult = ROXFetcherResult
public typealias RoxFreeze = ROXFreeze
public typealias RoxExceptionTrigger = ROXExceptionTrigger
public typealias RoxDynamicPropertyContext = ROXDynamicPropertyContext
public typealias RoxString = ROXString
public typealias RoxFlag = ROXFlag
public typealias RoxInt = ROXInt
public typealias RoxDouble = ROXDouble
@_hasMissingDesignatedInitializers public class ROX {
  public static func setup(withKey key: Swift.String)
  public static func setup(withKey key: Swift.String, options: ROXOptions)
  public static func register(_ namespace: Swift.String = "", container: RoxContainer)
  public static func unfreeze()
  public static func flagsViewController() -> UIKit.UIViewController
  public static func setCustomProperty(key: Swift.String, value: Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: Swift.String)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?, ROXDynamicPropertyContext?) -> Swift.String)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: @escaping (Swift.String?, ROXDynamicPropertyContext?) -> Swift.String)
  public static func setCustomProperty(key: Swift.String, asSemver: Swift.Bool, value: @escaping () -> Swift.String)
  public static func setCustomProperty(key: Swift.String, value: Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?, ROXDynamicPropertyContext?) -> Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Bool)
  public static func setCustomProperty(key: Swift.String, value: Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?, ROXDynamicPropertyContext?) -> Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Int32)
  public static func setCustomProperty(key: Swift.String, value: Swift.Double)
  public static func setCustomProperty(key: Swift.String, value: @escaping (Swift.String?, ROXDynamicPropertyContext?) -> Swift.Double)
  public static func setCustomProperty(key: Swift.String, value: @escaping () -> Swift.Double)
  public static func setGlobalContext(context: ROXDynamicPropertyContext)
  public static func fetch()
  public static func overrides() -> ROXFlagsOverrides
  public static func dynamicAPI() -> ROXDynamicAPI
  public static func flags() -> [ROXString]
  public static func shutdown()
  @objc deinit
}
